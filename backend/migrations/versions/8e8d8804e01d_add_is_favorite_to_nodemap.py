"""Add is_favorite to Nodemap

Revision ID: 8e8d8804e01d
Revises: 16da316e953f
Create Date: 2023-10-27 10:00:00.000000 # Replace with your actual creation date

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql # Import postgresql dialect if using PostgreSQL

# revision identifiers, used by Alembic.
revision = '8e8d8804e01d'
down_revision = '16da316e953f' # Ensure this matches your previous revision ID
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('nodemap', schema=None) as batch_op:
        # Add the new 'is_favorite' column.
        # Initially allow nullable and set a server_default for existing rows.
        batch_op.add_column(sa.Column('is_favorite', sa.Boolean(), server_default=sa.text('false'), nullable=True))

    # Now, after adding the column with a default for existing rows,
    # we can alter it to be NOT NULL.
    # This step ensures that all existing rows get the default value (False)
    # before the NOT NULL constraint is enforced.
    with op.batch_alter_table('nodemap', schema=None) as batch_op:
         batch_op.alter_column('is_favorite',
                               existing_type=sa.Boolean(),
                               nullable=False,
                               server_default=None) # Remove server default after setting NOT NULL

    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    with op.batch_alter_table('nodemap', schema=None) as batch_op:
        # In downgrade, remove the column
        batch_op.drop_column('is_favorite')

    # ### end Alembic commands ###
